#include "keywords.hpp"
using namespace CompileLCL;
int Keywords::c = 0;
std::string Keywords::m[Keywords::length];
void Keywords::init(const int addr,std::string x){
        Keywords::m[addr] = x;
	    Keywords::c++;
}
void Keywords::reg(){
	Keywords::init(Keywords::l::para_public,"PB");
	Keywords::init(Keywords::l::para_private,"PX");
	Keywords::init(Keywords::l::para_protected,"PCK");
//
	Keywords::init(Keywords::l::para_final,"FL");
	Keywords::init(Keywords::l::para_static,"SA");
	Keywords::init(Keywords::l::para_abstract,"AB");
	Keywords::init(Keywords::l::para_transient,"TR");
	Keywords::init(Keywords::l::para_volatile,"VA");
	Keywords::init(Keywords::l::para_strictfp,"SF");
//
	Keywords::init(Keywords::l::para_int,"I");
	Keywords::init(Keywords::l::para_boolean,"B");
	Keywords::init(Keywords::l::para_char,"C");
	Keywords::init(Keywords::l::para_string,"S");
	Keywords::init(Keywords::l::para_byte,"GBY");
	Keywords::init(Keywords::l::para_float,"F");
	Keywords::init(Keywords::l::para_long,"L");
	Keywords::init(Keywords::l::para_double,"D");
	Keywords::init(Keywords::l::para_short,"GSH");
	Keywords::init(Keywords::l::para_object,"X");
	Keywords::init(Keywords::l::para_void,"VO");
	Keywords::init(Keywords::l::para_ab_obj_cl, "GAOC");
//
	Keywords::init(Keywords::l::para_plus,"+");
	Keywords::init(Keywords::l::para_plus_set,"+V");
	Keywords::init(Keywords::l::para_plus_plus,"++");
	Keywords::init(Keywords::l::para_minus,"-");
	Keywords::init(Keywords::l::para_minus_set,"-V");
	Keywords::init(Keywords::l::para_minus_minus,"--");
	Keywords::init(Keywords::l::para_multiply,"M");
	Keywords::init(Keywords::l::para_multiply_set,"MV");
	Keywords::init(Keywords::l::para_divide,"Q");
	Keywords::init(Keywords::l::para_divide_set,"QV");
	Keywords::init(Keywords::l::para_modulo,"P");
	Keywords::init(Keywords::l::para_modulo_set,"PV");
    Keywords::init(Keywords::l::para_power_of,"PO");
		//
	Keywords::init(Keywords::l::para_set,"V");
	Keywords::init(Keywords::l::para_equal,"E");
	Keywords::init(Keywords::l::para_not_equal,"NE");
	Keywords::init(Keywords::l::para_greater_than,">");
	Keywords::init(Keywords::l::para_smaller_than,"<");
	Keywords::init(Keywords::l::para_greater_equal,">E");
	Keywords::init(Keywords::l::para_smaller_equal,"<E");
	Keywords::init(Keywords::l::para_not,"N");
	Keywords::init(Keywords::l::para_and_and,"AA");
	Keywords::init(Keywords::l::para_or_or,"OO");
	Keywords::init(Keywords::l::para_xor,"XO");
	Keywords::init(Keywords::l::para_unary,"UY");
	Keywords::init(Keywords::l::para_right_shift,"RS");
	Keywords::init(Keywords::l::para_right_right_shift,"RRS");
	Keywords::init(Keywords::l::para_left_shift,"LS");
	Keywords::init(Keywords::l::para_and_set,"AV");
	Keywords::init(Keywords::l::para_or_set,"OV");
	Keywords::init(Keywords::l::para_xor_set,"XOV");
	Keywords::init(Keywords::l::para_right_shift_set,"RSV");
	Keywords::init(Keywords::l::para_right_right_shift_set,"RRSV");
	Keywords::init(Keywords::l::para_left_shift_set,"LV");
	Keywords::init(Keywords::l::para_object_or,"GXO");
	//
	Keywords::init(Keywords::l::para_if,"Y");
	Keywords::init(Keywords::l::para_else,"NY");
	Keywords::init(Keywords::l::para_for,"RF");
	Keywords::init(Keywords::l::para_while,"WH");
	Keywords::init(Keywords::l::para_do,"DO");
	Keywords::init(Keywords::l::para_switch,"YY");
	Keywords::init(Keywords::l::para_if_end,"QY");
	Keywords::init(Keywords::l::para_return,"RT");
	Keywords::init(Keywords::l::para_break,"KB");
	Keywords::init(Keywords::l::para_continue,"CT");
	Keywords::init(Keywords::l::para_case,"CS");
	Keywords::init(Keywords::l::para_default,"DEF");
	Keywords::init(Keywords::l::para_goto,"GT");
	Keywords::init(Keywords::l::para_goto_allowance,"GTA");
	//
	Keywords::init(Keywords::l::para_bracket_round_open,"T");
	Keywords::init(Keywords::l::para_bracket_round_close,"NT");
	Keywords::init(Keywords::l::para_bracket_cornered_open,"K");
	Keywords::init(Keywords::l::para_bracket_cornered_close,"NK");
	Keywords::init(Keywords::l::para_bracket_curly_open,"W");
	Keywords::init(Keywords::l::para_bracket_curly_close,"NW");
	//
	Keywords::init(Keywords::l::para_new,"NV");
	Keywords::init(Keywords::l::para_exit,"exit");
	//Keywords::init(Keywords::l::para_escape_uppercase,"#");
	Keywords::init(Keywords::l::para_semicolon,"J");
	Keywords::init(Keywords::l::para_quotes,"Z");
	Keywords::init(Keywords::l::para_super,"SP");
	Keywords::init(Keywords::l::para_annotation,"UA");
	Keywords::init(Keywords::l::para_this,"UV");
	Keywords::init(Keywords::l::para_const,"NOC");
	//
	Keywords::init(Keywords::l::para_comment_area_start,"GCA");
	Keywords::init(Keywords::l::para_comment_area_end,"NGCA");
	Keywords::init(Keywords::l::para_comment_line,"GCL");
	//
	Keywords::init(Keywords::l::para_class,"CL");
	Keywords::init(Keywords::l::para_interface,"CLI");
	Keywords::init(Keywords::l::para_nativ,"NAT");
	Keywords::init(Keywords::l::para_enum,"CLE");
	Keywords::init(Keywords::l::para_record,"CLR");
	Keywords::init(Keywords::l::para_catch,"CAT");
	Keywords::init(Keywords::l::para_finally,"FLY");
	Keywords::init(Keywords::l::para_thro,"TH");
	Keywords::init(Keywords::l::para_throws,"THS");
	Keywords::init(Keywords::l::para_try,"TY");
	Keywords::init(Keywords::l::para_assert,"ASS");
	//
	Keywords::init(Keywords::l::para_package,"PK");
	Keywords::init(Keywords::l::para_import,"IM");
	//
	Keywords::init(Keywords::l::para_synchronized,"SYN");
	Keywords::init(Keywords::l::para_comma,",");
	Keywords::init(Keywords::l::para_point,".");
	//
//	Keywords::init(Keywords::l::para_,"");
}
